Archi- tecture,Bits,Version,Intro- duced,Max # operands,Type,Design,Registers (excluding FP/vector),Instruction encoding,Branch evaluation,Endian-<br>ness,Extensions,Open,Royalty free
6502,8,[null],1975,1,Register Memory,CISC,3,Variable (8- to 32-bit),Condition register,Little,[null],[null],[null]
680x0,32,[null],1979,2,Register Memory,CISC,8 data and 8 address,Variable,Condition register,Big,[null],[null],[null]
8080,8,[null],1974,2,Register Memory,CISC,8,Variable (8 to 24 bits),Condition register,Little,[null],[null],[null]
8051,32 (8→32),[null],1977?,1,Register Register,CISC,[null],Variable (8-bit to 128 bytes),Compare and branch,Little,[null],[null],[null]
x86,16  32  64 (16→32→64),[null],1978,2 (integer) 3 (AVX)<ref>The LEA (8086 & later) and IMUL-immediate (80186 & later) instructions accept three operands; most other instructions of the base integer ISA accept no more than two operands.</ref>,Register Memory,CISC,[null],Variable (8086 ~ 80386: variable between 1 and 6 bytes /w MMU + intel SDK  80486: 2 to 5 bytes with prefix  pentium and onward: 2 to 4 bytes with prefix  x64: 4 bytes prefix  third party x86 emulation: 1 to 15 bytes w/o prefix & MMU . SSE/MMX: 4 bytes /w prefix AVX: 8 Bytes /w prefix),Condition code,Little,x87  IA-32  MMX  3DNow!  SSE  SSE2  PAE  x86-64  SSE3  SSSE3  SSE4  BMI  AVX  AES  FMA  XOP  F16C,[null],[null]
Alpha,64,[null],1992,3,Register Register,RISC,32 (including "zero"),Fixed (32-bit),Condition register,Bi,,    ,[null],[null]
ARC,16/32,ARCv2<ref>https://www.synopsys.com/designware-ip/processor-solutions/arc-processors.html</ref>,1996,3,Register Register,RISC,16 or 32 including SP user can increase to 60,Variable (16- and 32-bit),Compare and branch,Bi,APEX User-defined instructions,[null],[null]
ARM/A32,32,ARMv1-v8,1983,3,Register Register,RISC,[null],Fixed (32-bit),Condition code,Bi,NEON  Jazelle    TrustZone ,[null],[null]
Thumb/T32,32,ARMv6-ARMv8,1983,3,Register Register,RISC,[null],Thumb: Fixed (16-bit)  Thumb-2: Variable (16- and 32-bit),Condition code,Bi,NEON  Jazelle    TrustZone ,[null],[null]
A64,64,ARMv8-A<ref>ARMv8 Technology Preview</ref>,2011<ref></ref>,3,Register Register,RISC,32 (including the stack pointer/"zero" register),Fixed (32-bit),Condition code,Bi,none: all ARMv7 extensions are non-optional,[null],[null]
AVR,8,[null],1997,2,Register Register,RISC,32 16 on "reduced architecture",Variable (mostly 16-bit  four instructions are 32-bit),Condition register  skip conditioned on an I/O or general purpose register bit  compare and skip,Little,[null],[null],[null]
AVR32,32,Rev 2,2006,2–3,[null],RISC,15,Variable<ref></ref>,[null],Big,Java Virtual Machine,[null],[null]
Blackfin,32,[null],2000,3<ref></ref>,Register Register,RISC<ref></ref>,2 accumulators 8 data registers 8 pointer registers 4 index registers 4 buffer registers,Variable(16- or 32-bit),Condition code,Little<ref></ref>,[null],[null],[null]
CDC 6000,60,[null],1964,3,Register Memory,RISC,24 (8 18-bit address reg.  8 18-bit index reg.  8 60-bit operand reg.),Variable (15  30  and 60-bit),Compare and branch,n/a<ref>Since memory is an array of 60-bit words with no means to access sub-units  big endian vs. little endian makes no sense. The optional CMU unit uses big endian semantics.</ref>,Compare/Move Unit  additional Peripheral Processing Units,[null],[null]
Crusoe (native VLIW),32<ref name="crusoe-arch"></ref>,[null],2000,1,Register Register<ref name="crusoe-arch"/>,VLIW<ref name="crusoe-arch" /><ref name="technology-behind-crusoe"></ref>,[null],Variable (64- or 128-bit in native mode  15 bytes in x86 emulation)<ref name="technology-behind-crusoe" />,Condition code<ref name="crusoe-arch" />,Little,[null],[null],[null]
Elbrus (native VLIW),64,Elbrus-4S,2014,1,Register Register<ref name="crusoe-arch"/>,VLIW,8–64,64,Condition code,Little,Just-in-time dynamic trans- lation: x87  IA-32  MMX  SSE  SSE2  x86-64  SSE3  AVX,[null],[null]
DLX,32,[null],1990,3,[null],RISC,32,Fixed (32-bit),[null],Big,[null],[null],[null]
eSi-RISC,16/32,[null],2009,3,Register Register,RISC,8–72,Variable (16- or 32-bit),Compare and branch and condition register,Bi,User-defined instructions,[null],[null]
Itanium (IA-64),64,[null],2001,[null],Register Register,EPIC,128,Fixed (128 bit bundles with 5 bit template tag and 3 instructions  each 41 bit long),Condition register,Bi (selectable),Intel Virtualization Technology,[null],[null]
M32R,32,[null],1997,3,Register Register,RISC,16,Variable (16- or 32-bit),Condition register,Bi,[null],[null],[null]
Mico32,32,[null],2006,3,Register Register,RISC,32<ref></ref>,Fixed (32-bit),Compare and branch,Big,User-defined instructions,<ref></ref>,[null]
MIPS,64 (32→64),6<ref>MIPS64 Architecture for Programmers: Release 6</ref><ref>MIPS32 Architecture for Programmers: Release 6</ref>,1981,1–3,Register Register,RISC,4–32 (including "zero"),Fixed (32-bit),Condition register,Bi,MDMX  MIPS-3D,[null],<ref>MIPS Open</ref>
MMIX,64,[null],1999,3,Register Register,RISC,256,Fixed (32-bit),[null],Big,[null],[null],[null]
NS320xx,32,[null],1982,5,Memory Memory,CISC,8,Variable Huffman coded  up to 23 bytes long,Condition code,Little,BitBlt instructions,[null],[null]
OpenRISC,32  64,1.3<ref>OpenRISC Architecture Revisions</ref>,2010,3,Register Register,RISC,16 or 32,Fixed,[null],[null],[null],[null],[null]
PA-RISC (HP/PA),64 (32→64),2.0,1986,3,Register Register,RISC,32,Fixed (32-bit),Compare and branch,Big → Bi,MAX,[null],[null]
PDP-8<ref></ref>,12,[null],1966,[null],Register Memory,CISC,1 accumulator 1 multiplier quotient register,Fixed (12-bit),Condition register Test and branch,[null],EAE(Extended Arithmetic Element),[null],[null]
PDP-11,16,[null],1970,3,Memory Memory,CISC,8 (includes stack pointer  though any register can act as stack pointer),Fixed (16-bit),Condition code,Little,Floating Point  Commercial Instruction Set,[null],[null]
POWER  PowerPC  Power ISA,32/64 (32→64),3.0B<ref></ref>,1990,3,Register Register,RISC,32,Fixed (32-bit)  Variable,Condition code,Big/Bi,AltiVec  APU  VSX  Cell,[null],[null]
RISC-V,32  64  128,2.2<ref></ref>,2010,3,Register Register,RISC,32 (including "zero"),Variable,Compare and branch,Little,[null],[null],[null]
RX,64/32/16,[null],2000,3,Memory Memory,CISC,4 integer + 4 address,Variable,Compare and branch,Little,[null],[null],[null]
S+core,16/32,[null],2005,[null],[null],RISC,[null],[null],[null],Little,[null],[null],[null]
SPARC,64 (32→64),OSA2017<ref>Oracle SPARC Processor Documentation</ref>,1985,3,Register Register,RISC,32 (including "zero"),Fixed (32-bit),Condition code,Big → Bi,VIS,[null],<ref>SPARC Architecture License</ref>
SuperH (SH),32,[null],1994,2,Register Register Register Memory,RISC,16,Fixed (16- or 32-bit)  Variable,Condition code (single bit),Bi,[null],[null],[null]
System/360 System/370 z/Architecture,64 (32→64),[null],1964,2 (most) 3 (FMA  distinct operand facility) 4 (some vector inst.),Register Memory Memory Memory Register Register,CISC,16,Variable (16-  32-  or 48-bit),Condition code  compare and branch,Big,[null],[null],[null]
Transputer,32 (4→64),[null],1987,1,Stack machine,MISC,3 (as stack),Variable (8 ~ 120 bytes),Compare and branch,Little,[null],[null],[null]
VAX,32,[null],1977,6,Memory Memory,CISC,16,Variable,Compare and branch,Little,[null],[null],[null]
Z80,8,[null],1976,2,Register Memory,CISC,17,Variable (8 to 32 bits),Condition register,Little,[null],[null],[null]
Archi- tecture,Bits,Version,Intro- duced,Max # operands,Type,Design,Registers (excluding FP/vector),Instruction encoding,Branch evaluation,Endian-<br>ness,Extensions,Open,Royalty free
